---


- name: ASM Policy Update with Blocked IPs
  hosts: next-cm
  connection: local
  gather_facts: false
  vars_files:
    - vars/f5_vars.yml
  tasks:

    - name: "Show Debug of Blocked IPs"
      ansible.builtin.debug:
        msg: "These are the IPs that need to be blocked - {{ Blocked_IPs }}"

    - name: Login to BIG-IP Next
      ansible.builtin.uri:
        url: " https://{{ ansible_host }}/api/login"
        method: POST
        body: '{"username": "{{ lookup("env", "ANSIBLE_NET_USERNAME") }}", "password": "{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}"}'
        status_code: 200
        timeout: 300
        body_format: json
        validate_certs: false
      delegate_to: localhost
      register: login_info
     # no_log: true

    # - name: Debug Login Info
    #   ansible.builtin.debug:
    #     var: login_info

    - name: Create WAF Policy
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/spaces/default/security/waf-policies"
        method: POST
        body: '{"description": "My Ansible WAF Policy","enforcement_mode": "blocking", "application_language": "utf-8", "tags": [ "tag1" ], "case_insensitive": true, "name": "{{ waf_policy_name }}", "template_name": "RAPID-Template", "declaration": {}}'
        status_code:
          - 200
          - 400
        timeout: 300
        body_format: json
        headers:
          Authorization: "Bearer {{ login_info.json.access_token }}"
        validate_certs: false
      delegate_to: localhost
      register: waf_policies_info
      # no_log: true

    - name: Get all WAF Policies
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/spaces/default/security/waf-policies"
        method: GET
        status_code: 200
        timeout: 300
        body_format: json
        headers:
          Authorization: "Bearer {{ login_info.json.access_token }}"
        validate_certs: false
      delegate_to: localhost
      register: waf_policies_info
      # no_log: true

    # - debug:
    #     var: waf_policies_info

    - name: "Add Blocked IPs to {{ waf_policy_name }}"
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/spaces/default/security/waf/policy-ip-addresses/"
        method: POST
        body: '{"blocking_mode":"always","ip_address":"{{ item }}","ip_mask":"","action":"create","policies":["{{ waf_policy_name }}"],"trusted_by_policy_builder":false,"never_log_requests":false,"never_learn_requests":false}'
        status_code:
          - 204
          - 304
          - 400
        timeout: 300
        body_format: json
        headers:
          Authorization: "Bearer {{ login_info.json.access_token }}"
        validate_certs: false
      delegate_to: localhost
      register: waf_policy
      with_items: "{{ Blocked_IPs }}"
      failed_when: (waf_policy.status == 400) and (waf_policy.json.message is not search("already exists"))

    # - name: Debug WAF Policy
    #   ansible.builtin.debug:
    #     var: waf_policy

    - name: "Deploying WAF Policy - {{ waf_policy_name }}"
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/waf/v1/tasks/deploy-policy"
        method: POST
        body: '{"policy_name": "{{ waf_policy_name }}","comment": "This is a comment" }'
        status_code:
          - 201
        timeout: 300
        body_format: json
        headers:
          Authorization: "Bearer {{ login_info.json.access_token }}"
        validate_certs: false
      delegate_to: localhost
      register: waf_deployment

    # - name: debug WAF_Deployment Output
    #   ansible.builtin.debug:
    #     var: waf_deployment


- name: BIG-IP Next Automation - Use Case 4
  hosts: next-cm
  connection: httpapi
  gather_facts: false
  vars_files:
    - vars/f5_vars.yml
  vars:
    ansible_httpapi_password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'
    ansible_httpapi_port: 443
    ansible_network_os: f5networks.next.cm
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false

  tasks:

    - name: Collect users and files information on CM device
      f5networks.next.cm_device_info:
        gather_subset:
          - all
      register: cm_info

    - name: Declaration with Next - AS3 - USE-CASE-4
      f5networks.next.cm_next_as3_deploy:
        content: "{{ lookup('template', 'j2/waf_and_cert_declaration.j2', split_lines=False) }}"
        target_ip: "{{ item.hostname }}"
      with_items: "{{ cm_info.managed_devices }}"
