---

# Validate Existing URL Addresses
- name: Validate Existing URL Addresses
  ansible.builtin.shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
  register: Blocked_URLs_Valid
  with_items: "{{ Blocked_URLs }}"
  ignore_errors: true
  when: Blocked_URLs is defined
  delegate_to: localhost

# Create Disallowed URLs Section if missing
- name: Add Disallowed URLs
  community.general.xml:
    path: "{{ ASM_Policy_File }}"
    input_type: xml
    pretty_print: true
    insertafter: true
    xpath: /policy/urls/url[*]
    add_children: "<disallowed_urls></disallowed_urls>"
  when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"
  delegate_to: localhost

# Import Additional Disallowed URLs
- name: Add Disallowed URLs
  community.general.xml:
    path: "{{ ASM_Policy_File }}"
    input_type: xml
    pretty_print: true
    xpath: /policy/urls/disallowed_urls
    add_children:
      - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
      - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
  with_items: "{{ Blocked_URLs_Valid.results }}"
  when: Blocked_URLs is defined and item.rc == 1
  delegate_to: localhost

# Enable Illegal URL Blocking Violations
- name: Illegal URL Blocking Violations Enablement
  community.general.xml:
    path: "{{ ASM_Policy_File }}"
    input_type: xml
    pretty_print: true
    xpath: /policy/blocking/violation[@name="Illegal URL"]
    set_children:
      - "<alarm>true</alarm>"
      - "<block>true</block>"
      - "<learn>true</learn>"
      - "<policy_builder_tracking>enabled</policy_builder_tracking>"
  when: Blocked_URLs is defined
  delegate_to: localhost
